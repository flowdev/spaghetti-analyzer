# analyze the project and return an exit code
analyze 0 --root $WORK --doc 'cmd/exe1,cmd/exe2,pkg/domain1,pkg/domain2,pkg/domain3,pkg/domain4'
! exists package_dependencies.md
! exists package_statistics.md
! exists dirtree.txt
cmp cmd/exe1/package_dependencies.md cmd/exe1/package_dependencies.expected 
cmp cmd/exe2/package_dependencies.md cmd/exe2/package_dependencies.expected 
cmp pkg/domain1/package_dependencies.md pkg/domain1/package_dependencies.expected 
cmp pkg/domain2/package_dependencies.md pkg/domain2/package_dependencies.expected 
cmp pkg/domain3/package_dependencies.md pkg/domain3/package_dependencies.expected 
cmp pkg/domain4/package_dependencies.md pkg/domain4/package_dependencies.expected 


-- cmd/exe1/package_dependencies.md --
-- cmd/exe1/package_dependencies.expected --
# Dependency Table For: github.com/flowdev/spaghetti-analyzer/testdata/good-proj/cmd/exe1

| | p k g / d b / m o d e l - D | p k g / d b / s t o r e - D | [p k g / d o m a i n 1 - S](../../pkg/domain1/package_dependencies.md)  | [p k g / d o m a i n 2 - S](../../pkg/domain2/package_dependencies.md)  | p k g / x / t o o l - T | p k g / x / t o o l 2 - T |
| :- | :- | :- | :- | :- | :- | :- |
| **cmd/exe1** | | **D** | **S** | **S** | | |
| `pkg/db/store` | `D` | | | | `T` | `T` |

### Legend

* Rows - Importing packages
* Columns - Imported packages


#### Meaning Of Row And Row Header Formatting

* **Bold** - God package (can use all packages)
* `Code` - Database package (can only use tool and other database packages)
* _Italic_ - Tool package (foundational, no dependencies)
* No formatting - Standard package (can only use tool and database packages)


#### Meaning Of Letters In Table Columns

* G - God package (can use all packages)
* D - Database package (can only use tool and other database packages)
* T - Tool package (foundational, no dependencies)
* S - Standard package (can only use tool and database packages)
-- cmd/exe2/package_dependencies.md --
-- cmd/exe2/package_dependencies.expected --
# Dependency Table For: github.com/flowdev/spaghetti-analyzer/testdata/good-proj/cmd/exe2

| | p k g / d b / m o d e l - D | p k g / d b / s t o r e - D | [p k g / d o m a i n 3 - S](../../pkg/domain3/package_dependencies.md)  | [p k g / d o m a i n 4 - S](../../pkg/domain4/package_dependencies.md)  | p k g / x / t o o l - T | p k g / x / t o o l 2 - T |
| :- | :- | :- | :- | :- | :- | :- |
| **cmd/exe2** | | **D** | **S** | **S** | | |
| `pkg/db/store` | `D` | | | | `T` | `T` |

### Legend

* Rows - Importing packages
* Columns - Imported packages


#### Meaning Of Row And Row Header Formatting

* **Bold** - God package (can use all packages)
* `Code` - Database package (can only use tool and other database packages)
* _Italic_ - Tool package (foundational, no dependencies)
* No formatting - Standard package (can only use tool and database packages)


#### Meaning Of Letters In Table Columns

* G - God package (can use all packages)
* D - Database package (can only use tool and other database packages)
* T - Tool package (foundational, no dependencies)
* S - Standard package (can only use tool and database packages)
-- pkg/domain1/package_dependencies.md --
-- pkg/domain1/package_dependencies.expected --
# Dependency Table For: github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/domain1

| | p k g / d b / m o d e l - D | p k g / d b / s t o r e - D | p k g / x / t o o l - T | p k g / x / t o o l 2 - T |
| :- | :- | :- | :- | :- |
| `pkg/db/store` | `D` | | `T` | `T` |
| pkg/domain1 | | D | T | |

### Legend

* Rows - Importing packages
* Columns - Imported packages


#### Meaning Of Row And Row Header Formatting

* **Bold** - God package (can use all packages)
* `Code` - Database package (can only use tool and other database packages)
* _Italic_ - Tool package (foundational, no dependencies)
* No formatting - Standard package (can only use tool and database packages)


#### Meaning Of Letters In Table Columns

* G - God package (can use all packages)
* D - Database package (can only use tool and other database packages)
* T - Tool package (foundational, no dependencies)
* S - Standard package (can only use tool and database packages)
-- pkg/domain2/package_dependencies.md --
-- pkg/domain2/package_dependencies.expected --
# Dependency Table For: github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/domain2

| | p k g / d b / m o d e l - D | p k g / d b / s t o r e - D | p k g / x / t o o l - T | p k g / x / t o o l 2 - T |
| :- | :- | :- | :- | :- |
| `pkg/db/store` | `D` | | `T` | `T` |
| pkg/domain2 | | D | | T |

### Legend

* Rows - Importing packages
* Columns - Imported packages


#### Meaning Of Row And Row Header Formatting

* **Bold** - God package (can use all packages)
* `Code` - Database package (can only use tool and other database packages)
* _Italic_ - Tool package (foundational, no dependencies)
* No formatting - Standard package (can only use tool and database packages)


#### Meaning Of Letters In Table Columns

* G - God package (can use all packages)
* D - Database package (can only use tool and other database packages)
* T - Tool package (foundational, no dependencies)
* S - Standard package (can only use tool and database packages)
-- pkg/domain3/package_dependencies.md --
-- pkg/domain3/package_dependencies.expected --
# Dependency Table For: github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/domain3

| | p k g / d b / m o d e l - D | p k g / d b / s t o r e - D | p k g / x / t o o l - T | p k g / x / t o o l 2 - T |
| :- | :- | :- | :- | :- |
| `pkg/db/store` | `D` | | `T` | `T` |
| pkg/domain3 | | D | T | |

### Legend

* Rows - Importing packages
* Columns - Imported packages


#### Meaning Of Row And Row Header Formatting

* **Bold** - God package (can use all packages)
* `Code` - Database package (can only use tool and other database packages)
* _Italic_ - Tool package (foundational, no dependencies)
* No formatting - Standard package (can only use tool and database packages)


#### Meaning Of Letters In Table Columns

* G - God package (can use all packages)
* D - Database package (can only use tool and other database packages)
* T - Tool package (foundational, no dependencies)
* S - Standard package (can only use tool and database packages)
-- pkg/domain4/package_dependencies.md --
-- pkg/domain4/package_dependencies.expected --
# Dependency Table For: github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/domain4

| | p k g / d b / m o d e l - D | p k g / d b / s t o r e - D | [p k g / d o m a i n 3 - S](../domain3/package_dependencies.md)  | p k g / x / t o o l - T | p k g / x / t o o l 2 - T |
| :- | :- | :- | :- | :- | :- |
| `pkg/db/store` | `D` | | | `T` | `T` |
| pkg/domain4 | | D | S | | T |

### Legend

* Rows - Importing packages
* Columns - Imported packages


#### Meaning Of Row And Row Header Formatting

* **Bold** - God package (can use all packages)
* `Code` - Database package (can only use tool and other database packages)
* _Italic_ - Tool package (foundational, no dependencies)
* No formatting - Standard package (can only use tool and database packages)


#### Meaning Of Letters In Table Columns

* G - God package (can use all packages)
* D - Database package (can only use tool and other database packages)
* T - Tool package (foundational, no dependencies)
* S - Standard package (can only use tool and database packages)
-- .spaghetti-cutter.hjson --
{
	"tool": ["pkg/x/*"], "db": ["pkg/db/*"],
	"allowAdditionally": {"pkg/domain4": ["pkg/domain3"]},
	"size": 1024
}

-- pkg/domain2/domain2.go --
package domain2

import (
	"github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/db/store"
	"github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/x/tool2"
)

func HandleDomain2Route1(s *store.Store) {
	tool2.Tool2()
	s.GetAllProducts()
}

func HandleDomain2Route2(s *store.Store) {
	ps := s.GetAllProducts()
	s.SaveProduct(ps[0])
}

-- pkg/x/tool/tool_test.go --
package tool

import (
	"testing"
)

func TestTool(t *testing.T) {
	t.Log("Executing TestTool")
	Tool()
}

-- pkg/x/tool/tool.go --
package tool

import "log"

// Tool is logging its execution.
func Tool() {
	log.Printf("INFO - tool.Tool")
}

-- pkg/x/tool2/tool2_test.go --
package tool2_test

import (
	"testing"

	"github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/x/tool2"
)

func TestTool(t *testing.T) {
	t.Log("Executing TestTool")
	tool2.Tool2()
}

-- pkg/x/tool2/tool2.go --
package tool2

import (
	"log"
)

// Tool2 is logging its execution.
func Tool2() {
	log.Printf("INFO - tool.Tool")
}

-- pkg/db/model/model.go --
package model

type Product struct {
	Name  string
	Price float64
}

type ShoppingCart struct {
	Content  []Product
	Discount float64
}

-- pkg/db/store/store.go --
package store

import (
	"github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/db/model"
	"github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/x/tool"
	"github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/x/tool2"
)

type Store struct {
	// no real DB so no real fields either
}

func (s *Store) GetAllProducts() []model.Product {
	tool.Tool()
	return []model.Product{
		{Name: "prod1", Price: 12.34},
		{Name: "prod2", Price: 56.78},
	}
}

func (s *Store) SaveProduct(prod model.Product) error {
	tool2.Tool2()
	return nil
}

func (s *Store) GetShoppingCart() model.ShoppingCart {
	return model.ShoppingCart{
		Content: []model.Product{
			{Name: "prod1", Price: 12.34},
			{Name: "prod2", Price: 56.78},
		},
		Discount: 0.9,
	}
}

-- pkg/domain1/domain1.go --
package domain1

import (
	"github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/db/store"
	"github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/x/tool"
)

func HandleDomain1Route1(s *store.Store) {
	tool.Tool()
	s.GetAllProducts()
}

func HandleDomain1Route2(s *store.Store) {
	s.GetShoppingCart()
}

-- pkg/domain3/domain3.go --
package domain3

import (
	"github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/db/store"
	"github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/x/tool"
)

func HandleDomain3Route1(s *store.Store) {
	tool.Tool()
	s.GetAllProducts()
}

func HandleDomain3Route2(s *store.Store) {
	s.GetShoppingCart()
}

-- pkg/domain4/domain4.go --
package domain4

import (
	"fmt"

	"github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/db/store"
	"github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/domain3"
	"github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/x/tool2"
)

func HandleDomain4Route1(s *store.Store) {
	tool2.Tool2()
	s.GetAllProducts()
}

func HandleDomain4Route2(s *store.Store) {
	domain3.HandleDomain3Route1(s)
	foo(1, 2, 3, 4, "s1", "s2", "s3")
}

func foo(i1, i2, i3, i4 int, s1, s2, s3 string) {
	if i1 > 0 {
		fmt.Println("I sum:", i1+i2+i3+i4)
	} else {
		fmt.Println("S sum:", s1+s2+s3)
	}

	for i := 0; i < i2; i++ {
		go bar(i, s3)
	}
}

func bar(i int, s string) {
	switch i % 2 {
	case 0:
		fmt.Println("You are even:", i, s)
	case 1:
		fmt.Println("That is odd:", i)
	default:
		fmt.Println("What's this???", i)
	}
}

-- cmd/exe1/main.go --
package main

import (
	"log"
	"os"

	"github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/db/store"
	"github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/domain1"
	"github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/domain2"
)

func main() {
	doIt(os.Args[1:])
}

func doIt(args []string) {
	log.Printf("INFO - this is the main package, args: %q", args)
	s := &store.Store{}
	domain1.HandleDomain1Route1(s)
	domain1.HandleDomain1Route2(s)

	domain2.HandleDomain2Route1(s)
	domain2.HandleDomain2Route2(s)
}

-- cmd/exe2/main.go --
package main

import (
	"log"
	"os"

	"github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/db/store"
	"github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/domain3"
	"github.com/flowdev/spaghetti-analyzer/testdata/good-proj/pkg/domain4"
)

func main() {
	doIt(os.Args[1:])
}

func doIt(args []string) {
	log.Printf("INFO - this is the main package, args: %q", args)
	s := &store.Store{}
	domain3.HandleDomain3Route1(s)
	domain3.HandleDomain3Route2(s)

	domain4.HandleDomain4Route1(s)
	domain4.HandleDomain4Route2(s)
}

-- go.mod --
module github.com/flowdev/spaghetti-analyzer/testdata/good-proj

go 1.14
